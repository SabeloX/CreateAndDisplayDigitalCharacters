[{"/home/sabelo-x/Documents/Personal Projects/notes/pages/_app.tsx":"1","/home/sabelo-x/Documents/Personal Projects/notes/pages/api/hello.ts":"2","/home/sabelo-x/Documents/Personal Projects/notes/pages/index.tsx":"3","/home/sabelo-x/Documents/Personal Projects/notes/components/character-item.tsx":"4","/home/sabelo-x/Documents/Personal Projects/notes/components/character-list.tsx":"5","/home/sabelo-x/Documents/Personal Projects/notes/pages/api/characters/index.ts":"6","/home/sabelo-x/Documents/Personal Projects/notes/pages/api/characters/new.ts":"7"},{"size":188,"mtime":1662816692974,"results":"8","hashOfConfig":"9"},{"size":307,"mtime":1662816692974,"results":"10","hashOfConfig":"9"},{"size":4103,"mtime":1665172722044,"results":"11","hashOfConfig":"9"},{"size":594,"mtime":1665159371481,"results":"12","hashOfConfig":"9"},{"size":626,"mtime":1665146990956,"results":"13","hashOfConfig":"9"},{"size":741,"mtime":1665139528076,"results":"14","hashOfConfig":"9"},{"size":942,"mtime":1665145851214,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1boom46",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/sabelo-x/Documents/Personal Projects/notes/pages/_app.tsx",[],[],"/home/sabelo-x/Documents/Personal Projects/notes/pages/api/hello.ts",[],[],"/home/sabelo-x/Documents/Personal Projects/notes/pages/index.tsx",["38","39"],[],"import type { NextPage } from 'next'\nimport Head from 'next/head'\nimport Image from 'next/image'\nimport { ChangeEvent, FormEvent, useEffect, useState } from 'react'\nimport { CharacterList } from '../components/character-list'\nimport styles from '../styles/Home.module.css'\nconst domain = process.env.DOMAIN || \"https://create-and-display-digital-characters.vercel.app/\"\n\n\nexport type Character = {\n  description: string;\n  name: string;\n  date: Date;\n}\n\ninterface HomeProps {\n  characters: Character[]\n}\n\nconst Home: NextPage<HomeProps> = ({ characters }) => {\n  const [characterDescription, setCharacterDescription] = useState<string>(\"\");\n  const [characterName, setCharacterName] = useState<string>(\"\");\n  // const [characters, setCharacters] = useState<Character[]>([]);\n  const [error, setError] = useState<string>(\"\");\n  const [characterList, setCharacterList] = useState<Character[]>([]);\n\n  useEffect(() => {\n    setCharacterList(characters);\n  }, []);\n\n  const submitCharacter = async (event: FormEvent) => {\n    event.preventDefault()\n    if (characterName === \"\" && characterDescription !== \"\") {\n      setError(\"Please enter your character name.\");\n    }\n    else if (characterDescription === \"\" && characterName !== \"\") {\n      setError(\"Please enter a description of your character.\");\n    }\n    else if (characterName === \"\" && characterDescription === \"\") {\n      setError(\"Please enter your character details.\");\n    }\n    else {\n      try { \n        const response = await fetch(`/api/characters/new`,\n          {\n            method: \"POST\",\n            body: JSON.stringify({ name: characterName, description: characterDescription }),\n          }\n        );\n        const data = await response.json();\n        setCharacterList([data.character as Character, ...characterList]);\n        setCharacterDescription(\"\");\n        setCharacterName(\"\");\n        setError(\"\");\n      }\n      catch (error) {\n        setError(\"Error saving new character. Please try again.\")\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>Characters</title>\n        <meta name=\"description\" content=\"An application for adding Avatar ID.\" />\n      </Head>\n      <div className={styles.root}>\n        <Image\n          width={300}\n          height={300}\n          src=\"/images/—Pngtree—color highlights abstract light effects_5528945.png\"\n        />\n        <h2 className={styles.title}>Digital Characters</h2>\n        <div className={styles.container}>\n          <div className={styles.input}>\n            <h3 className={styles.heading}>Add your character identity. Be creative.</h3>\n            <form className={styles.form} onSubmit={(event: FormEvent<HTMLFormElement>) =>submitCharacter(event)}>\n              <input\n                className={styles.name}\n                placeholder='Your name goes here...'\n                value={characterName}\n                onChange={(event: ChangeEvent<HTMLInputElement>) => setCharacterName(event.target.value)}\n              />\n              <textarea\n                className={styles.description}\n                placeholder='Description of your character (e.g., I turn rain into wine. Stars into dust. Sun into lava.)'\n                value={characterDescription}\n                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => setCharacterDescription(event.target.value)}\n              />\n              {error !== \"\" && <p className={styles.error}>{error}</p> }\n              <button\n                type='submit'\n                className={styles.submit}\n              >\n                Create\n              </button>\n            </form>\n          </div>\n          <div className={styles.characters_container}>\n            <h3>Characters in realm</h3>\n            <CharacterList characters={characterList}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport async function getServerSideProps() {\n  const response = await fetch(`${domain}/api/characters`);\n  const data = await response.json();\n\n  return {\n    props: {\n      characters: data ? data.characters as Character[] : []\n    }\n  }\n}\n\nexport default Home\n","/home/sabelo-x/Documents/Personal Projects/notes/components/character-item.tsx",[],[],"/home/sabelo-x/Documents/Personal Projects/notes/components/character-list.tsx",[],[],"/home/sabelo-x/Documents/Personal Projects/notes/pages/api/characters/index.ts",[],[],"/home/sabelo-x/Documents/Personal Projects/notes/pages/api/characters/new.ts",[],[],{"ruleId":"40","severity":1,"message":"41","line":29,"column":6,"nodeType":"42","endLine":29,"endColumn":8,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":69,"column":9,"nodeType":"46","endLine":73,"endColumn":11},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'characters'. Either include it or remove the dependency array. If 'setCharacterList' needs the current value of 'characters', you can also switch to useReducer instead of useState and read 'characters' in the reducer.","ArrayExpression",["47"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"48","fix":"49"},"Update the dependencies array to be: [characters]",{"range":"50","text":"51"},[956,958],"[characters]"]